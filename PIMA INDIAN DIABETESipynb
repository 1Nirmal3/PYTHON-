{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"PIMA INDIAN DIABETESipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMTcf0uKX1YCrWGoWfFJTTw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"nGNmWC_wxPPJ","executionInfo":{"status":"ok","timestamp":1639457225719,"user_tz":-330,"elapsed":949,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np \n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn import metrics\n","import seaborn as sn\n","import matplotlib.pyplot as plt\n"]},{"cell_type":"code","source":["col_names=['pregnant','glucose','bp','skin','insulin','bmi','pedigree','age','label']\n","pima=pd.read_csv('/content/diabetes.csv', names=col_names, skiprows=1)\n","pima.head()"],"metadata":{"id":"SHhlPyJ6zifM","executionInfo":{"status":"ok","timestamp":1639457225721,"user_tz":-330,"elapsed":33,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}},"colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"94e26378-5260-4939-8b52-2ef208641cc3"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pregnant</th>\n","      <th>glucose</th>\n","      <th>bp</th>\n","      <th>skin</th>\n","      <th>insulin</th>\n","      <th>bmi</th>\n","      <th>pedigree</th>\n","      <th>age</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>40</td>\n","      <td>35</td>\n","      <td>168</td>\n","      <td>43.1</td>\n","      <td>2.288</td>\n","      <td>33</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   pregnant  glucose  bp  skin  insulin   bmi  pedigree  age  label\n","0         6      148  72    35        0  33.6     0.627   50      1\n","1         1       85  66    29        0  26.6     0.351   31      0\n","2         8      183  64     0        0  23.3     0.672   32      1\n","3         1       89  66    23       94  28.1     0.167   21      0\n","4         0      137  40    35      168  43.1     2.288   33      1"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["feature_cols=['pregnant','glucose','bp','skin','insulin','bmi','pedigree','age']\n","X=pima[feature_cols]\n","y=pima.label"],"metadata":{"id":"h6-XkxTBzyyX","executionInfo":{"status":"ok","timestamp":1639457225722,"user_tz":-330,"elapsed":28,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0)"],"metadata":{"id":"tzNB4ptS0P9i","executionInfo":{"status":"ok","timestamp":1639457225722,"user_tz":-330,"elapsed":27,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["lr=LogisticRegression()"],"metadata":{"id":"jhUo2QEfKVpO","executionInfo":{"status":"ok","timestamp":1639457225723,"user_tz":-330,"elapsed":27,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["lr.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XH-h7LPwKhrm","executionInfo":{"status":"ok","timestamp":1639457225723,"user_tz":-330,"elapsed":26,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}},"outputId":"5903343e-fa10-4d4b-9054-2eaa62a61644"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["y_pred=lr.predict(X_test)"],"metadata":{"id":"v9j3ek8hKmmG","executionInfo":{"status":"ok","timestamp":1639457225724,"user_tz":-330,"elapsed":20,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["matrix=metrics.confusion_matrix(y_test,y_pred)\n","matrix"],"metadata":{"id":"xBLWasKOQLiF","executionInfo":{"status":"ok","timestamp":1639457225724,"user_tz":-330,"elapsed":19,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c1fad924-748b-4628-bbd1-c014f2ead8e2"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[115,  15],\n","       [ 25,  37]])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["matrix=pd.crosstab(y_test,y_pred,rownames=['Actual'],colnames=['Predicted'])\n","sn.heatmap(matrix,annot=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"wXCAjtPjQa1_","executionInfo":{"status":"ok","timestamp":1639457226721,"user_tz":-330,"elapsed":1013,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}},"outputId":"91d57602-1207-4cba-c71f-fe8f6d74bfa4"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f17318e1450>"]},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["accuracy=metrics.accuracy_score(y_test,y_pred)\n","print('Accuracy Score:',accuracy)\n","print('Accuracy in Percentage:',(accuracy*100),'%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dAvhtFwlQZGG","executionInfo":{"status":"ok","timestamp":1639457226722,"user_tz":-330,"elapsed":6,"user":{"displayName":"Nirmal Thomas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17505839203146327210"}},"outputId":"c2251367-bbed-4941-b33c-421c5c3a7509"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy Score: 0.7916666666666666\n","Accuracy in Percentage: 79.16666666666666 %\n"]}]}]}